import java.util.*;

public class Main {

    static class SinglyLinkedList {
        static class Node {
            int v;
            Node next;
            Node(int v) { this.v = v; }
        }
        Node head, tail;
        int size;

        void addLast(int v) {
            Node n = new Node(v);
            if (head == null) head = tail = n;
            else { tail.next = n; tail = n; }
            size++;
        }

        void moveHas3To(SinglyLinkedList dest) {
            Node prev = null, cur = head;
            while (cur != null) {
                Node nxt = cur.next;
                if (has3(cur.v)) {
                    if (prev == null) head = nxt; else prev.next = nxt;
                    if (cur == tail) tail = prev;
                    size--;

                    cur.next = null;
                    if (dest.head == null) dest.head = dest.tail = cur;
                    else { dest.tail.next = cur; dest.tail = cur; }
                    dest.size++;
                } else {
                    prev = cur;
                }
                cur = nxt;
            }
        }

        long sum() {
            long s = 0;
            for (Node p = head; p != null; p = p.next) s += p.v;
            return s;
        }
    }

    static boolean isPrime(int x) {
        if (x < 2) return false;
        if (x == 2) return true;
        if (x % 2 == 0) return false;
        for (int d = 3; d * d <= x; d += 2) {
            if (x % d == 0) return false;
        }
        return true;
    }

    static boolean has3(int x) {
        while (x > 0) { if (x % 10 == 3) return true; x /= 10; }
        return false;
    }

    public static void main(String[] args) {
        int n;
        if (args.length > 0) n = Integer.parseInt(args[0]);
        else {
            Scanner sc = new Scanner(System.in);
            System.out.print("Enter n (< 1000000): ");
            n = sc.nextInt();
        }

        if (n < 0 || n >= 1_000_000) {
            System.out.println("n must be between 0 and 999,999.");
            return;
        }

        SinglyLinkedList primes = new SinglyLinkedList();
        for (int i = 2; i <= n; i++) if (isPrime(i)) primes.addLast(i);

        SinglyLinkedList with3 = new SinglyLinkedList();
        primes.moveHas3To(with3);

        long sumWith3 = with3.sum();

        System.out.println("n = " + n);
        System.out.println("Sum of primes with digit '3' = " + sumWith3);
        if (n == 100) System.out.println("Expected (n=100) = 359");
    }
}
